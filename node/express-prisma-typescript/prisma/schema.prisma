// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "tracing"] // TODO a chckear
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username String  @unique // Unique constraint
  name     String? @db.VarChar(35) // Limit display name to 35 characters
  email    String  @unique // Unique constraint
  password String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts            Post[]
  follows          Follow[]           @relation(name: "follows")
  followers        Follow[]           @relation(name: "followers")
  accountPrivacy   AccountPrivacyType @relation(fields: [accountPrivacyId], references: [id])
  accountPrivacyId String             @db.Uuid
  reactions        PostReaction[]
}

model AccountPrivacyType {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  name String @unique // Unique constraint
  User User[] // One to many
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many

  @@unique([followerId, followedId])
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId String   @db.Uuid // Foreign Key
  content  String   @db.VarChar(240) // Limit the content to 240 characters
  images   String[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many

  PostInteractionCount PostInteractionCount[]
  PostReaction         PostReaction[]
}

model PostInteractionCount {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  postId String @db.Uuid // Foreign Key
  typeId String @db.Uuid // Foreign Key
  count  Int

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  post Post             @relation(fields: [postId], references: [id], onDelete: Cascade) // One to many
  type PostReactionType @relation(fields: [typeId], references: [id], onDelete: Cascade) // One to many

  @@unique([postId, typeId])
}

model PostReactionType {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  name                 String                 @unique // Unique constraint
  PostReaction         PostReaction[]
  PostInteractionCount PostInteractionCount[]
}

model PostReaction {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  userId String @db.Uuid // Foreign Key
  postId String @db.Uuid // Foreign Key
  typeId String @db.Uuid // Foreign Key

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  user User             @relation(fields: [userId], references: [id], onDelete: Cascade) // One to many
  post Post             @relation(fields: [postId], references: [id], onDelete: Cascade) // One to many
  type PostReactionType @relation(fields: [typeId], references: [id], onDelete: Cascade) // One to many

  @@unique([userId, postId, typeId])
}
